
// leaderboardApi.ts
// Handles API communication for leaderboard data using RTK Query.
// Extends the base 'gameApi' to create endpoints for fetching player and clan leaderboard data.

import { gameApi } from '@/shared/api';
import {
    PlayerLeaderboardResponse,
    ClanLeaderboardResponse,
    ClanPositionResponse,
} from '@/entities/Leaderboard/types/leaderboard';


// Extends the base gameApi with leaderboard endpoints using RTK Query's injectEndpoints.
// Each endpoint uses the /api/ proxy path for backend routing.
export const leaderboardApi = gameApi.injectEndpoints({
    endpoints: (builder: {
        query: <ResultType, ArgType>(config: any) => any;
    }) => ({

        // Fetch top players from backend
        getTopPlayers: builder.query<any[], void>({
            query: () => '/api/leaderboard/player', // Proxied to backend
            transformResponse: (response: any) => response.data?.Player ?? [],
        }),

        // Fetch top clans from backend
        getTopClans: builder.query<any[], void>({
            query: () => '/api/leaderboard/clan', // Proxied to backend
            transformResponse: (response: any) => response.data?.Clan ?? [],
        }),

        // Fetch a specific clan's leaderboard position
        getClanPosition: builder.query<ClanPositionResponse, string>({
            query: (clanId: string) => `/api/leaderboard/clan/position?clanId=${clanId}`,
        }),
    }),
    // Prevents overriding existing endpoints
    overrideExisting: false,
});

// Exports the autogenerated hooks from RTK Query for use in React components.
// These hooks handle the data fetching, caching, and state management automatically.
export const { useGetTopPlayersQuery, useGetTopClansQuery, useGetClanPositionQuery } =
    leaderboardApi;